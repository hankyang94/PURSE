clc
clear
close all

relaxpath   = "../CertifiablyRobustPerception";
mosekpath   = '../mosek';
addpath(genpath(relaxpath))
addpath(genpath(mosekpath))

score_type  = "radius-maxp";
epsilon     = 0.1;
do_frcnn    = false;
job         = 5;

% fname = sprintf("/Users/hankyang/Downloads/samples_pose_uncertain_ellinf_%s_%.2f.mat",score_type,epsilon);
fname = sprintf("../6D_Pose/samples_pose_uncertain_ellinf_%s_%.2f.mat",score_type,epsilon);
if do_frcnn
    fname = sprintf("../6D_Pose/samples_pose_uncertain_ellinf_%s_%.2f_frcnn.mat",score_type,epsilon);
end
load(fname)

n_objs = length(A);
log_R_err_bound = {};
log_t_err_bound = {};

for objidx = 1:n_objs
    n_samples       = size(A{objidx},1);
    obj_A           = A{objidx};
    obj_B           = B{objidx};
    obj_R_samples    = R_samples{objidx};
    obj_t_samples    = t_samples{objidx};

    obj_R_bounds = zeros(2,n_samples);
    obj_t_bounds = zeros(2,n_samples);

    for idx = 1:n_samples
        A_c = squeeze(obj_A(idx,:,:,:));
        B_c = squeeze(obj_B(idx,:,:));

        n_poses  = size(obj_R_samples{idx},1);
        pose_id  = rem(job,n_poses);

        for j = 1:2
            pose_j = pose_ids(j);
            R_query = squeeze(obj_R_samples{idx}(pose_j,:,:));
            t_query = squeeze(obj_t_samples{idx}(pose_j,:));
            t_query = t_query(:);

            [R_bd, t_bd] = compute_bound_one_instance(A_c,B_c,R_query,t_query);
            obj_R_bounds(j,idx) = R_bd;
            obj_t_bounds(j,idx) = t_bd;
        end
    end

    log_R_err_bound = [log_R_err_bound;{obj_R_bounds}];
    log_t_err_bound = [log_t_err_bound;{obj_t_bounds}];
end

matname = sprintf("pose_sample_bound_%s_%.2f_%d.mat",score_type,epsilon,job);
if do_frcnn
    matname = sprintf("pose_sample_bound_%s_%.2f_%d_frcnn.mat",score_type,epsilon,job);
end
save(matname,'log_R_err_bound','log_t_err_bound');


function [R_bd,t_bd] = compute_bound_one_instance(A_c,B_c,R_avg,t_avg)
[R_max,~,info] = compute_max_rotation_distance(R_avg,A_c,B_c);
if ~isempty(R_max) && (info.gap < 1e-6)
    R_err_max = getAngularError(R_max,R_avg);
    R_bd = R_err_max;
else
    R_err_bound = rad2deg(acos(1 - info.f_sdp/4));
    R_bd = R_err_bound;
end

[~,t_max,info] = compute_max_translation_distance(t_avg,A_c,B_c);
if ~isempty(t_max) && (info.gap < 1e-6)
    t_err_max = getTranslationError(t_max,t_avg);
    t_bd = t_err_max;
else
    t_err_bound = sqrt(info.f_sdp);
    t_bd = t_err_bound;
end
end
